#include <iostream>

class DynamicArray {
private:
    int* data;
    int size;
    int capacity;

public:
    DynamicArray() : data(nullptr), size(0), capacity(0) {}

    DynamicArray(int capacity) : size(0), capacity(capacity) {
        data = new int[capacity];
    }

    ~DynamicArray() {
        delete[] data;
    }

    DynamicArray(const DynamicArray& other) :
        size(other.size),
        capacity(other.capacity)
    {
        std::cout << "Вызван конструктор копирования. Значения увеличены." << std::endl;

        data = new int[capacity];
        for (int i = 0; i < size; ++i) {
            data[i] = other.data[i] + 1;
        }
    }

    int getSize() const { return size; }
    int getCapacity() const { return capacity; }

    int getElement(int index) const {
        if (index >= 0 && index < size) {
            return data[index];
        }
        return -1;
    }

    void setElement(int index, int value) {
        if (index >= 0 && index < size) {
            data[index] = value;
        }
    }

    void push_back(int value) {
        if (size == capacity) {
           int newCapacity = (capacity == 0) ? 1 : capacity * 2;
           int* newData = new int[newCapacity];
           for (int i = 0; i < size; ++i) {
               newData[i] = data[i];
           }
           delete[] data;
           data = newData;
           capacity = newCapacity;
        }

        data[size] = value;
        size++;
    }
};
